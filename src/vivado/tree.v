/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post97, git sha1 a1bb0255d) */

module tt_um_COLVERTYETY_top(uio_in, ena, clk, rst_n, uo_out, uio_out, uio_oe, ui_in, input_ready, img);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  reg [24:0] \$65 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  input clk;
  wire clk;
  wire \clk$8 ;
  input ena;
  wire ena;
  wire rst;
  input rst_n;
  wire rst_n;
  reg [24:0] s_image = 25'h0000000;
  input [7:0] ui_in;
  wire [7:0] ui_in;
  input [7:0] uio_in;
  wire [7:0] uio_in;
  output [7:0] uio_oe;
  wire [7:0] uio_oe;
  output [7:0] uio_out;
  wire [7:0] uio_out;
  output [7:0] uo_out;
  reg [7:0] uo_out;
  output [4:0] input_ready;
  reg [4:0] input_ready;
  output [24:0] img;
  wire [24:0] img;
  assign img = s_image;
  
  assign \$34  = ~ s_image[15];
  assign \$35  = ~ s_image[21];
  assign \$36  = ~ s_image[10];
  assign \$37  = ~ s_image[12];
  assign \$38  = ~ s_image[10];
  assign \$39  = ~ s_image[21];
  assign \$40  = ~ s_image[12];
  assign \$41  = ~ s_image[17];
  assign \$42  = ~ s_image[12];
  assign \$43  = ~ s_image[19];
  assign \$44  = ~ s_image[7];
  assign \$45  = ~ s_image[7];
  assign \$46  = ~ s_image[9];
  assign \$47  = ~ s_image[8];
  assign \$48  = ~ s_image[15];
  assign \$49  = ~ s_image[10];
  assign \$50  = ~ s_image[10];
  assign \$51  = ~ s_image[12];
  assign \$52  = ~ s_image[6];
  assign \$53  = ~ s_image[18];
  assign \$54  = ~ s_image[15];
  assign \$55  = ~ s_image[12];
  assign \$56  = ~ s_image[10];
  assign \$57  = ~ s_image[17];
  assign \$58  = ~ s_image[6];
  assign \$59  = ~ s_image[16];
  assign \$60  = ~ s_image[17];
  assign \$61  = ~ s_image[6];
  assign \$62  = ~ s_image[3];
  assign \$63  = ~ s_image[11];
  assign \$64  = ~ s_image[6];
  always @(posedge clk)
    s_image <= \$65 ;
  assign rst = ~ rst_n;
  assign \$1  = ~ s_image[5];
  assign \$2  = ~ s_image[1];
  assign \$3  = ~ s_image[2];
  assign \$4  = ~ s_image[15];
  assign \$5  = ~ s_image[20];
  assign \$6  = ~ s_image[6];
  assign \$7  = ~ s_image[0];
  assign \$8  = ~ s_image[0];
  assign \$9  = ~ s_image[10];
  assign \$10  = ~ s_image[12];
  assign \$11  = ~ s_image[16];
  assign \$12  = ~ s_image[7];
  assign \$13  = ~ s_image[12];
  assign \$14  = ~ s_image[21];
  assign \$15  = ~ s_image[6];
  assign \$16  = ~ s_image[22];
  assign \$17  = ~ s_image[22];
  assign \$18  = ~ s_image[12];
  assign \$19  = ~ s_image[17];
  assign \$20  = ~ s_image[7];
  assign \$21  = ~ s_image[7];
  assign \$22  = ~ s_image[1];
  assign \$23  = ~ s_image[6];
  assign \$24  = ~ s_image[12];
  assign \$25  = ~ s_image[2];
  assign \$26  = ~ s_image[10];
  assign \$27  = ~ s_image[0];
  assign \$28  = ~ s_image[11];
  assign \$29  = ~ s_image[10];
  assign \$30  = ~ s_image[19];
  assign \$31  = ~ s_image[21];
  assign \$32  = ~ s_image[6];
  assign \$33  = ~ s_image[12];
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      if (\$2 ) begin
        (* full_case = 32'd1 *)
        if (\$3 ) begin
          uo_out = 8'h03;
        end else begin
          uo_out = 8'h04;
        end
      end else begin
        (* full_case = 32'd1 *)
        if (\$4 ) begin
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
              (* full_case = 32'd1 *)
              if (\$7 ) begin
                uo_out = 8'h03;
              end else begin
                uo_out = 8'h07;
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$8 ) begin
                uo_out = 8'h05;
              end else begin
                (* full_case = 32'd1 *)
                if (\$9 ) begin
                  (* full_case = 32'd1 *)
                  if (\$10 ) begin
                    uo_out = 8'h01;
                  end else begin
                    uo_out = 8'h02;
                  end
                end else begin
                  (* full_case = 32'd1 *)
                  if (\$11 ) begin
                    (* full_case = 32'd1 *)
                    if (\$12 ) begin
                      (* full_case = 32'd1 *)
                      if (\$13 ) begin
                        uo_out = 8'h03;
                      end else begin
                        uo_out = 8'h01;
                      end
                    end else begin
                      uo_out = 8'h03;
                    end
                  end else begin
                    uo_out = 8'h07;
                  end
                end
              end
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              uo_out = 8'h07;
            end else begin
              (* full_case = 32'd1 *)
              if (\$15 ) begin
                uo_out = 8'h03;
              end else begin
                (* full_case = 32'd1 *)
                if (\$16 ) begin
                  uo_out = 8'h03;
                end else begin
                  uo_out = 8'h01;
                end
              end
            end
          end
        end else begin
          (* full_case = 32'd1 *)
          if (\$17 ) begin
            (* full_case = 32'd1 *)
            if (\$18 ) begin
              (* full_case = 32'd1 *)
              if (\$19 ) begin
                uo_out = 8'h07;
              end else begin
                (* full_case = 32'd1 *)
                if (\$20 ) begin
                  uo_out = 8'h01;
                end else begin
                  uo_out = 8'h02;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$21 ) begin
                uo_out = 8'h08;
              end else begin
                uo_out = 8'h03;
              end
            end
          end else begin
            uo_out = 8'h02;
          end
        end
      end
    end else begin
      (* full_case = 32'd1 *)
      if (\$22 ) begin
        (* full_case = 32'd1 *)
        if (\$23 ) begin
          (* full_case = 32'd1 *)
          if (\$24 ) begin
            uo_out = 8'h01;
          end else begin
            uo_out = 8'h04;
          end
        end else begin
          (* full_case = 32'd1 *)
          if (\$25 ) begin
            (* full_case = 32'd1 *)
            if (\$26 ) begin
              uo_out = 8'h04;
            end else begin
              uo_out = 8'h06;
            end
          end else begin
            uo_out = 8'h04;
          end
        end
      end else begin
        (* full_case = 32'd1 *)
        if (\$27 ) begin
          (* full_case = 32'd1 *)
          if (\$28 ) begin
            (* full_case = 32'd1 *)
            if (\$29 ) begin
              (* full_case = 32'd1 *)
              if (\$30 ) begin
                (* full_case = 32'd1 *)
                if (\$31 ) begin
                  uo_out = 8'h01;
                end else begin
                  uo_out = 8'h02;
                end
              end else begin
                uo_out = 8'h03;
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$32 ) begin
                uo_out = 8'h00;
              end else begin
                (* full_case = 32'd1 *)
                if (\$33 ) begin
                  uo_out = 8'h02;
                end else begin
                  uo_out = 8'h06;
                end
              end
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$34 ) begin
              (* full_case = 32'd1 *)
              if (\$35 ) begin
                (* full_case = 32'd1 *)
                if (\$36 ) begin
                  (* full_case = 32'd1 *)
                  if (\$37 ) begin
                    uo_out = 8'h00;
                  end else begin
                    uo_out = 8'h09;
                  end
                end else begin
                  uo_out = 8'h04;
                end
              end else begin
                uo_out = 8'h09;
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$38 ) begin
                (* full_case = 32'd1 *)
                if (\$39 ) begin
                  (* full_case = 32'd1 *)
                  if (\$40 ) begin
                    uo_out = 8'h01;
                  end else begin
                    uo_out = 8'h09;
                  end
                end else begin
                  (* full_case = 32'd1 *)
                  if (\$41 ) begin
                    uo_out = 8'h08;
                  end else begin
                    (* full_case = 32'd1 *)
                    if (\$42 ) begin
                      uo_out = 8'h08;
                    end else begin
                      uo_out = 8'h03;
                    end
                  end
                end
              end else begin
                (* full_case = 32'd1 *)
                if (\$43 ) begin
                  (* full_case = 32'd1 *)
                  if (\$44 ) begin
                    uo_out = 8'h06;
                  end else begin
                    uo_out = 8'h08;
                  end
                end else begin
                  uo_out = 8'h00;
                end
              end
            end
          end
        end else begin
          (* full_case = 32'd1 *)
          if (\$45 ) begin
            (* full_case = 32'd1 *)
            if (\$46 ) begin
              (* full_case = 32'd1 *)
              if (\$47 ) begin
                (* full_case = 32'd1 *)
                if (\$48 ) begin
                  (* full_case = 32'd1 *)
                  if (\$49 ) begin
                    uo_out = 8'h09;
                  end else begin
                    uo_out = 8'h05;
                  end
                end else begin
                  (* full_case = 32'd1 *)
                  if (\$50 ) begin
                    (* full_case = 32'd1 *)
                    if (\$51 ) begin
                      (* full_case = 32'd1 *)
                      if (\$52 ) begin
                        uo_out = 8'h05;
                      end else begin
                        uo_out = 8'h09;
                      end
                    end else begin
                      uo_out = 8'h05;
                    end
                  end else begin
                    uo_out = 8'h06;
                  end
                end
              end else begin
                uo_out = 8'h00;
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$53 ) begin
                (* full_case = 32'd1 *)
                if (\$54 ) begin
                  uo_out = 8'h09;
                end else begin
                  uo_out = 8'h08;
                end
              end else begin
                (* full_case = 32'd1 *)
                if (\$55 ) begin
                  uo_out = 8'h07;
                end else begin
                  uo_out = 8'h03;
                end
              end
            end
          end else begin
            (* full_case = 32'd1 *)
            if (\$56 ) begin
              (* full_case = 32'd1 *)
              if (\$57 ) begin
                uo_out = 8'h09;
              end else begin
                (* full_case = 32'd1 *)
                if (\$58 ) begin
                  uo_out = 8'h09;
                end else begin
                  uo_out = 8'h05;
                end
              end
            end else begin
              (* full_case = 32'd1 *)
              if (\$59 ) begin
                (* full_case = 32'd1 *)
                if (\$60 ) begin
                  (* full_case = 32'd1 *)
                  if (\$61 ) begin
                    uo_out = 8'h00;
                  end else begin
                    uo_out = 8'h08;
                  end
                end else begin
                  uo_out = 8'h09;
                end
              end else begin
                (* full_case = 32'd1 *)
                if (\$62 ) begin
                  (* full_case = 32'd1 *)
                  if (\$63 ) begin
                    (* full_case = 32'd1 *)
                    if (\$64 ) begin
                      uo_out = 8'h00;
                    end else begin
                      uo_out = 8'h08;
                    end
                  end else begin
                    uo_out = 8'h08;
                  end
                end else begin
                  uo_out = 8'h00;
                end
              end
            end
          end
        end
      end
    end
  end
  
  
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$65  = s_image;
    casez (ui_in[2:0])
      3'h0: begin 
          \$65 [4:0] = ui_in[7:3];
          input_ready[0] = 1'b1;
      end 
          
      3'h1: begin 
          \$65 [9:5] = ui_in[7:3];
          input_ready[1] = 1'b1;
      end 
      
      3'h2: begin
          \$65 [14:10] = ui_in[7:3];
          input_ready[2] = 1'b1;
      end
      3'h3: begin 
          \$65 [19:15] = ui_in[7:3];
          input_ready[3] = 1'b1;
      end 
      3'h4: begin 
          \$65 [24:20] = ui_in[7:3];
          input_ready[4] = 1'b1;
      end 
    endcase
    if (rst) begin
      \$65  = 25'h0000000;
      input_ready = 5'b00000;
    end
  end
  assign \clk$8  = clk;
  assign uio_out = 8'hff;
  assign uio_oe = 8'hff;
endmodule
